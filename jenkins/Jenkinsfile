pipeline {
  agent any
  environment {
    APP_NAME = "auto_sql"
    DOCKER_IMAGE_NAME = "auto_python"
    TARGET = "${params.TARGET}" 
    MODULE = "${params.MODULE}"
    tenantSid = "${params.tenantSid}"
    tenantId = "${params.tenantId}"
    PORT = "0"
    DOCKER_REGISTRY_URL = "https://registry.digiwincloud.com.cn"
    DOCKER_REGISTRY_PROJECT = "tbb"
    DOCKER_IMAGE_NAME = "${DOCKER_REGISTRY_PROJECT}/auto_sql:0.0.0.${env.BUILD_ID}"

    WORKSPACE = "/var/lib/jenkins/workspace/auto_deploy_app_db"
  }
  stages {
    stage('构建前准备') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'builduser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        script {
          sh """                        
            echo "123"
      

             """
              }
            }
      }
    }
    
    stage('构建docker镜像') {
      steps {
        script {
          def dockerfile = 'jenkins/Dockerfile'
          def image = docker.build("${DOCKER_IMAGE_NAME}", "--build-arg TARGET=${TARGET} --build-arg MODULE=${MODULE} --build-arg tenantSid=${tenantSid} --build-arg tenantId=${tenantId} -f ${dockerfile} .")
          docker.withRegistry("${DOCKER_REGISTRY_URL}", "harbor_cn") {
          image.push()

        }
      }
    }
    stage('发布至prod环境') {
      when {
        expression { TARGET == 'prod' } 
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'twprod', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            deploy(TARGET, "52.230.85.205", USERNAME, PASSWORD,PORT)
          }
        }
      }
    }  
   }
}
}
def deploy(target, host, user, password,PORT) {
  def remote = [:]
  remote.name = "remote-host"
  remote.host = host
  remote.user = user
  remote.password = password
  remote.allowAnyHosts = true
  remote.pty = true
  sshPut remote: remote, from: "./jenkins/${APP_NAME}.sh", into: '.'
  sshCommand remote: remote, command: "chmod +x ./${APP_NAME}.sh", sudo: true
  sshCommand remote: remote, command: "bash -c './${APP_NAME}.sh ${env.BUILD_ID} ${APP_NAME} ${MODULE} ${TARGET} ${tenantSid} ${tenantId}'" // 传递 target 参数
}
  
